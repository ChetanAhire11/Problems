GFG
_______________________________________________________________________________________________________________________________________________________________________
1)Given a Integer array A[] of n elements. Your task is to complete the function PalinArray. Which will return 1 if all the elements of the Array are palindrome otherwise it will return 0.

      Example 1:
          Input:
          5
          111 222 333 444 555
          Output:
          1
Explanation:
A[0] = 111 //which is a palindrome number.
A[1] = 222 //which is a palindrome number.
A[2] = 333 //which is a palindrome number.
A[3] = 444 //which is a palindrome number.
A[4] = 555 //which is a palindrome number.
As all numbers are palindrome so This will return 1.
      Example 2:
         Input:
         3
         121 131 20
         Output:
         0
Explanation:
20 is not a palindrome hence the output is 0.

Answer:

   class GfG
      {
	public static int palinArray(int[] a, int n)
           {
                  //add code here.
                  for(int num:a){//use for each loop In array a element move in num variable
                      String number=String.valueOf(num);//number convert in string
                      int i=0;
                      int j=number.length()-1;
                      while(i<=j){
                          if(number.charAt(i)!=number.charAt(j))
                          return 0;
                          i++;
                          j--;
                      }
                  }
                  return 1;
           }
      }
---------------------------------------------------------------------------------------
2)Given a non-empty sequence of characters str, return true if sequence is Binary, else return false

      Example 1:
          Input:
          str = 101
          Output:
          1
Explanation:
Since string contains only 0 and 1, output is 1.
Example 2:

        Input:
        str = 75
        Output:
        0
Explanation:
Since string contains digits other than 0 and 1, output is 0.
 

Your Task:
Complete the function isBinary() which takes an string str as input parameter and returns 1 if str is binary and returns 0 otherwise.

Answer:
      class GfG
{
	boolean isBinary(String str)
	{
	  //Your code here
	  for(int i=0;i<str.length();i++){
	      if(str.charAt(i)!='0'&& str.charAt(i)!='1'){
	          return false;
	      }
	  }
	  return true;
	}
}
-----------------------------------------------------------------------------------------------------------------------------------------------
3)Given an array arr[] of N integers, calculate the median.
           NOTE: Return the floor value of the median.
 

          Example 1:
          Input: N = 5
          arr[] = 90 100 78 89 67
          Output: 89
Explanation: After sorting the array 
middle element is the median 

          Example 2:
          Input: N = 4
          arr[] = 56 67 30 79
          Output: 61
Explanation: In case of even number of 
elements, average of two middle elements 
is the median.

Answer: 
  class Solution
 {
    public int find_median(int[] v)
    {
    int mid;
    Arrays.sort(v);//predefined function for sorting array.
    int n=v.length;
    if(n % 2==0){
        mid=n/2;
        return ((v[mid]+v[mid-1])/2);
    }else{
        mid=n/2;
        return v[mid];
    }
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------4)Find Index
Given an unsorted array Arr[] of N integers and a Key which is present in this array. You need to write a program to find the start index( index where the element is first found from left in the array ) and end index( index where the element is first found from right in the array ).If the key does not exist in the array then return -1 for both start and end index in this case.
    
     Example 1:
     Input:
     N = 6
     arr[] = { 1, 2, 3, 4, 5, 5 }
     Key = 5
     Output:  4 5
Explanation:
5 appears first time at index 4 and
appears last time at index 5.
(0 based indexing)
 
    Example 2:
    Input:
    N=6
    arr[] = { 6, 5, 4, 3, 1, 2 }
    Key = 4
    Output:  2 2                                                 ////logic pending 

Answer:
 class Solution
  { 
    // Function to find starting and end index 
    static int[] findIndex(int a[], int N, int key) 
    { 
        //code here.
        int ans[]={-1,-1};
        for(int i=0;i<N;i++){
            if(a[i]==key){
                 ans[1]=i;
            }
        }
        for(int i=N-1;i>=0;i--){
            if (a[i]==key){
                ans[0]=i;
            }
        }
        return ans;
    }
 }

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
5)Swap kth elements

Given an array Arr of size N, swap the Kth element from beginning with Kth element from end.
    Example 1:
    Input:
    N = 8, K = 3 
    Arr[] = {1, 2, 3, 4, 5, 6, 7, 8}
    Output: 1 2 6 4 5 3 7 8
Explanation: Kth element from beginning is
3 and from end is 6.

   Example 2:
   Input:
   N = 5, K = 2
   Arr[] = {5, 3, 6, 1, 2}
   Output: 5 1 6 3 2                                                 ///0 based indexing 
Explanation: Kth element from beginning is
3 and from end is 1.

Answer:
 class Solution {
    void swapKth(int arr[], int n, int k) {
        // code here
        int temp=arr[k-1];
        arr[k-1]=arr[n-k];
        arr[n-k]=temp;
    }

 }

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
6)Given a string, remove spaces from it. 

    Example 1
    Input:
    S = "geeks  for geeks"
    Output: geeksforgeeks
Explanation: All the spaces have been 
removed.

   Example 2:
   Input: 
   S = "    g f g"
   Output: gfg
Explanation: All the spaces including
the leading ones have been removed.

Answer:
class Solution
{
   
    String modify(String S)
    {
        // your code here
        S=S.replaceAll(" ","");//it is predefined function for remove the space and also used for replce the words,chracter,number etc.
        return S;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
7)Given a string S. The task is to convert characters of string to lowercase.

     Example 1:
     Input: S = "ABCddE"
     Output: "abcdde"
Explanation: A, B, C and E are converted to
a, b, c and E thus all uppercase characters 
of the string converted to lowercase letter.

    Example 2:
    Input: S = "LMNOppQQ"
    Output: "lmnoppqq"
Explanation: L, M, N, O, and Q are 
converted to l, m, n, o and q thus 
all uppercase characters of the 
string converted to lowercase letter.

Answer:

class Solution {
    static String toLower(String S) {
        // code here
        S=S.toLowerCase();//it is predefined function for convert the uppercase letter in lowercase  & *toUpperCase();* is used for convert the lowercase letter                                                                                                                                                                    uppercase.
        return S;
        
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
8)Given an array of N distinct elements, the task is to find all elements in array except two greatest elements in sorted order.


   Example 1:
   Input : 
   a[] = {2, 8, 7, 1, 5}
   Output :
   1 2 5 
Explanation :
The output three elements have two or
more greater elements.   

   Example 2:
   Input :
   a[] = {7, -2, 3, 4, 9, -1}
   Output :
   -2 -1 3 4

Answer:
 class Solution {
    public long[] findElements( long a[], long n)
    {
        // Your code goes here
        Arrays.sort(a);
        long arr[]=new long[a.length-2];
        for(int i=0;i<a.length-2;i++){
            arr[i]=a[i];
            
        }
        return arr;
    }
 }

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
9)Given a string consisting of lowercase english alphabets, reverse only the vowels present in it and print the resulting string.

    Example 1:
    Input:
    S = "geeksforgeeks"
    Output: geeksforgeeks
Explanation: The vowels are: e, e, o, e, e
Reverse of these is also e, e, o, e, e.

   Example 2:
   Input: 
   S = "practice"
   Output: prectica
Explanation: The vowels are a, i, e
Reverse of these is e, i, a.
 
  Example 3:
  Input: 
  S = "bcdfg"
  Output: bcdfg
Explanation: There are no vowels in S.

Answer:

class Solution
{
    boolean check_vowel(char ch){
        if(ch=='a'|| ch=='e'||ch=='i'||ch=='o'||ch=='u'){
            return true;
        }
        return false;
    }
    String modify (String s)
    {
        // your code here
        char []s1=s.toCharArray();//convert the string into character.
        int l=0;
        int h=s1.length-1;
        while(l<h){
            if(!check_vowel(s1[l]))  l++;
            else if(!check_vowel(s1[h])) h--;
            else{
            char ch=s1[l];
            s1[l]=s1[h];
            s1[h]=ch;
            l++;
            h--;
        }
    }
    return new String(s1);
}
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
10)For a given array of price of items,you have to calculate the average of all prices upto 2 decimal places.
Note: Sum is printed automatically, you only need to calculate and return the average

  Example 1:
  Input:
  5
  1 2 3 4 5
  Output:
  15 3.00 
Explanation:
Sum of the array is 15, hence 
average is 15/5=3.00. 

  Example 2:
  Input:
  9
  2  55 85 656 52 554 545 5 2
  Output: 
  1956 217.33 
Explanation:
Sum of the array is 1956, hence 
average is 1956/9= 217.33.

Answer:
class Compute
{
    String average(int A[], int N)
    {
       float sum=0;
       for(int i=0;i<N;i++){
           sum=sum+A[i];
           
       }
           return String.format("%.2f",(sum/N));
       
    }
} 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
11)Given a array of length N, at each step it is reduced by 1 element. In the first step the maximum element would be removed, while in the second step minimum element of the remaining array would be removed, in the third step again the maximum and so on. Continue this till the array contains only 1 element. And find the final element remaining in the array.

    Example 1:
    Input:
    N = 7
    A[] = {7, 8, 3, 4, 2, 9, 5}
    Ouput:
    5
Explanation:
In first step '9' would be removed, in 2nd step
'2' will be removed, in third step '8' will be
removed and so on. So the last remaining
element would be '5'.  
 
   Example 2:
   Input:
   N = 8
   A[] = {8, 1, 2, 9, 4, 3, 7, 5}
   Ouput:
   4

Answer:
  class Solution {
    
    public long leftElement(long arr[], long n)
    {
        // Your code goes here  
        Arrays.sort(arr);//it is predefined funtion for sorting array 
        if(n%2==0){
            return arr[(int)(n/2)-1];//even number
        }else{
            return arr[(int)n/2];//odd number
        }                |
    }                 type casting
 }

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
12) Given a string, remove the vowels from the string.

    Example 1:
    Input: S = "welcome to geeksforgeeks"
    Output: wlcm t gksfrgks
Explanation: Ignore vowels and print other
characters 
   
   Example 2:
   Input: S = "what is your name ?" 
   Output: wht s yr nm ?
Explanation: Ignore vowels and print other
characters 

Answer:
class Solution {
    String removeVowels(String S) {
        // code here
        String s1="";                                                        //take a more time
        for(int i=0;i<S.length();i++){
            char ch=S.charAt(i); 
            if(!(ch=='a'|| ch=='e'||ch=='i'||ch=='o'||ch=='u')){
                s1=s1+ch;
         }
    }
    return s1;
}
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
13)Given a string, check if all its characters are the same or not.

     Example 1:
     Input:
     s = "geeks"
     Output: False
Explanation: The string contains different
character 'g', 'e', 'k' and 's'.

     Example 2:
     Input: 
     s = "gggg"
     Output: True
Explanation: The string contains only one
character 'g'.

Answer:
class Sol 
{
    Boolean check (String s)
    {
        char ch = s.charAt (0);//elment 0th position stored.
        for (int i = 1; i < s.length ();i++)
        {
            if (s.charAt(i) != ch)compare the each element with 0 th position element.
                return false;
        }
        return true;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
14)Given two strings S1 and S2 as input. Your task is to concatenate two strings and then reverse the string. Finally print the reversed string.

     Example 1:
     Input: S1 = "Geeks" , S2 = "forGeeks"
     Output: "skeeGrofskeeG" 
Explanation: Concatenating S1 and S2 to 
get "GeeksforGeeks" then reversing it to 
"skeeGrofskeeG".

    Example 2:
    Input: S1 = "Practice" , S2 = "Geeks"
    Output: "skeeGecitcarP"
Explanation: Concatenating S1 and S2 to
get "PracticeGeeks" then reversing it to
"skeegecitcarP".

Answer:
class Solution {
    static String conRevstr(String S1, String S2) {
        // code here
        String s4="";////////////////////////create final string and return this string.
        String s3=S1+""+S2;/////////////////joins the two string.
        for(int i=s3.length()-1;i>=0;i--){///reverese the join string.
            s4=s4+s3.charAt(i);//////////////and every character of join string add in final string .
        }
        return s4;//////////////////////////return final string.
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
15)Given a string S as input. Delete the characters at odd indices of the string.

       Example 1:
       Input: S = "Geeks"
       Output: "Ges" 
Explanation: Deleted "e" at index 1
and "k" at index 3.

      Example 2:
      Input: S = "GeeksforGeeks"
       Output: "GesoGes"
Explanation: Deleted e, k, f, r, e
k at index 1, 3, 5, 7, 9, 11.

Answer:
class Solution {
    static String delAlternate(String S) {
        String s1="";                                   //create new string
        for (int i = 0; i < S.length(); i++) {
            if (i % 2 == 0)            /////////////////find the odd index.
            s1 =s1+ S.charAt(i);/////////////////////////and those odd number character deleted.
        }
        return s1;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
16)Given a string str containing only lowercase letters, generate a string with the same letters, but in uppercase.

        Example 1:
        Input:
        str = "geeks"
Output: GEEKS

         Example 2:
         Input:
         str = "geeksforgeeks"
Output: GEEKSFORGEEKS

Answer:
class Solution 
{ 
    String to_upper(String str) 
    { 
        // code here
        str=str.toUpperCase();
        return str;
    }
} 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
17)Given a string S, write a program to count the occurrence of Lowercase characters, Uppercase characters, Special characters and Numeric values in the string.
Note: There are no white spaces in the string.

         Example 1:
         Input:
         S = "#GeeKs01fOr@gEEks07"
         Output:
         5
         8
         4
         2
Explanation: There are 5 uppercase characters,
8 lowercase characters, 4 numeric characters
and 2 special characters.

        Example 2:
        Input: 
        S = "*GeEkS4GeEkS*"
        Output:
        6 
        4
        1
        2
Explanation: There are 6 uppercase characters,
4 lowercase characters, 1 numeric characters
and 2 special characters.

Answer:

class Sol
{
    int[] count (String s)
    {
        // your code here   
        int s1[]=new int[4];
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)>='A' && s.charAt(i)<='Z'){
                s1[0]++;
            } else if(s.charAt(i)>='a' && s.charAt(i)<='z'){
                s1[1]++;
            }else if(s.charAt(i)>='0' && s.charAt(i)<='9'){
                s1[2]++;
            }else{
                s1[3]++;
            }
        }
        return s1;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
18)Given a string. Count the number of Camel Case characters in it.

        Example 1:
        Input:
        S = "ckjkUUYII"
        Output: 5
Explanation: Camel Case characters present:
U, U, Y, I and I.

        Example 2:
        Input: 
        S = "abcd"
        Output: 0
Explanation: No Camel Case character
present.

AnSwer:
class Sol
{
    int countCamelCase (String s)
    {
        int count =0;
     for(int i=0;i<s.length();i++){
            if(s.charAt(i)>='A' && s.charAt(i)<='Z'){
              count++;
    }
    
}
return count;
}}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------19)Given a string S and two integers L and R. Print the characters in the range L to R of the string.
NOTE: Assume zero based indexing.

      Example 1:
      Input: 
      S = "cdbkdub"
      L = 0 , R = 5
      Output: "cdbkdu" 
Explanation: Starting from index 0 ('c')
to index 5 ('u').
 
      Example 2:
      Input: 
      S = "sdiblcsdbud"
      L = 3 , R = 7
      Output: "blcsd"
Explanation: Starting from index 3 ('b')
to index 7 ('d').

Answer:
class Solution {
    static String javaSub(String S, int L, int R) {
        // code here
        String s1="";
        for(int i=L;i<=R;i++){
            s1=s1+S.charAt(i);
        }
        return s1;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
20)
Remove all characters except the numeric characters from an alphanumeric string.

     Example 1:
     Input: S = "AA1d23cBB4"
     Output: 1234
Explanation: Remove all characters
other than numbers
            
      Example 2:
      Input: S = "a1b2c3"
      Output: 123
Explanation: Remove all characters
other than numbers

Answer:

class Solution {
    String removeCharacters(String S) {
        // code here
        String s1="";
        for(int i=0;i<S.length();i++){
            if(S.charAt(i)>='0' && S.charAt(i)<='9'){
                s1=s1+S.charAt(i);
            }
        }
        return s1;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------21)Given a string S which consists of alphabets , numbers and special characters. You need to write a program to split the strings in three different strings S1, S2 and S3 such that the string S1 will contain all the alphabets present in S , the string S2 will contain all the numbers present in S and S3 will contain all special characters present in S.  The strings S1, S2 and S3 should have characters in same order as they appear in input.
 
    Example 1:
    Input:
    S = geeks01for02geeks03!!!
    Output:
    geeksforgeeks
    010203
    !!!
Explanation: The output shows S1, S2 and S3. 

   Example 2:
   Input:
   S = **Docoding123456789everyday##
   Output:
   Docdingeveryday
   123456789
   **##

Answer:
class Solution 
{ 
    static List<String> splitString(String S) 
    { 
        // code here 
        ArrayList<String> list=new ArrayList<>();
        String s1="";
        String s2="";
        String s3="";
       for(int i=0;i<S.length();i++){
            if(S.charAt(i)>='A' && S.charAt(i)<='Z'||S.charAt(i)>='a' && S.charAt(i)<='z'){
                s1=s1+S.charAt(i);
            }else if(S.charAt(i)>='0' && S.charAt(i)<='9'){
                s2=s2+S.charAt(i);
            }else{
                s3=s3+S.charAt(i);
            }
    }
    list.add(s1);
    list.add(s2);
    list.add(s3);
    return list;
}
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------22)Given an array A[] of N integers and an index Key. Your task is to return the element present at index key in the array.

    Example 1:
    Input:
    5 2
    10 20 30 40 50
    Output:
    30
 
    Example 2:
    Input:
    7 4
    10 20 30 40 50 60 70
    Output:
    50


Answer:
class Solution{
    public:
    int findElementAtIndex(int a[], int n, int key) 
    {
        // Your code goes here
        for(int i=0;i<n;i++){
            if(i==key){
                return a[i];
                
            }
        }
    }

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
23)Given a sorted array Arr of size N and a value X, find the number of array elements less than or equal to X and elements more than or equal to X. 

      Example 1:
      Input:
      N = 7, X = 0
      Arr[] = {1, 2, 8, 10, 11, 12, 19}
      Output: 0 7
Explanation: There are no elements less or
equal to 0 and 7 elements greater or equal
to 0.
 
     Example 2:
     Input:
     N = 7, X = 5
     Arr[] = {1, 2, 8, 10, 11, 12, 19}
     Output: 2 5
Explanation: There are 2 elements less or
equal to 5 and 5 elements greater or equal
to 5.

Answer:
class Solve {
    int[] getMoreAndLess(int[] arr, int n, int x) {
        // code here
        int a[]=new int [2];
        for(int i=0;i<n;i++){
            if(arr[i]<=x){
                a[0]++;
            }if(arr[i] >= x){
                a[1]++;
            }
        }
        return a;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
24)Given a string, remove the vowels from the string.

      Example 1:
      Input: S = "welcome to geeksforgeeks" 
      Output: wlcm t gksfrgks
Explanation: Ignore vowels and print other
characters 

      Example 2:
      Input: S = "what is your name ?"
      Output: wht s yr nm ?
Explanation: Ignore vowels and print other
characters 

Answer:
class Solution {
    String removeVowels(String S) {
        // code here
        String n = S.replaceAll("[aeiou]","");
        return n;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
25)Given a stream of incoming numbers, find average or mean of the stream at every point.

          Example 1:
          Input:
          n = 5
          arr[] = {10, 20, 30, 40, 50}
          Output: 10.00 15.00 20.00 25.00 30.00 
Explanation: 
10 / 1 = 10.00
(10 + 20) / 2 = 15.00
(10 + 20 + 30) / 3 = 20.00
And so on.
 
         Example 2:
         Input:
         n = 2
         arr[] = {12, 2}
Output: 12.00 7.00 
Explanation: 
12 / 1 = 12.00
(12 + 2) / 2 = 7.00

Answer:
class Solution {
    float[] streamAvg(int[] arr, int n) {
        // code here
        float avg[]=new float[n];
        float sum=0;
        for(int i=0;i<n;i++){
           sum=sum+arr[i];
           avg[i]=sum/(i+1);
        }
        return avg;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
26)Given a list of characters, merge all of them into a string.

       Example 1:
       Input:
       N = 13
       Char array = g e e k s f o r g e e k s
       Output: geeksforgeeks 
Explanation: combined all the characters
to form a single string.

     Example 2:
     Input:
     N = 4
     Char array = e e b a
     Output: eeba
Explanation: combined all the characters
to form a single string.

Answer:
class Solution{
    public String chartostr(char arr[], int N){
        String s1="";                                         //it is also corrrect but it has more time to execute.
       for(int i=0;i<N;i++){
           s1=s1+arr[i];                               
       return s1;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
27)Given a string s, extract all the integers from s.

          Example 1:
          Input:
          s = "1: Prakhar Agrawal, 2: Manish Kumar Rai, 
          3: Rishabh Gupta56"
          Output: 1 2 3 56
Explanation: 
1, 2, 3, 56 are the integers present in s.

        Example 2:
        Input:
        s = "geeksforgeeks"
        Output: No Integers
Explanation: 
No integers present in the string.
 
Answer: 
class Solution {
    ArrayList<String> extractIntegerWords(String s) {
        // Create an ArrayList to store the extracted integer words
        ArrayList<String> list = new ArrayList<>();

        // Create a StringBuilder to accumulate digits
        StringBuilder sb = new StringBuilder();

        // Iterate through each character in the input string
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);

            // If the character is a digit, append it to the StringBuilder
            if (Character.isDigit(ch)) {
                sb.append(ch);
            } else if (sb.length() > 0) {
                // If the character is not a digit and StringBuilder is not empty,
                // add the accumulated digits as a string to the ArrayList
                list.add(sb.toString());

                // Reset the StringBuilder for the next set of digits
                sb.setLength(0);
            }
        }

        // After the loop, check if there are any remaining digits in the StringBuilder
        // and add them to the ArrayList
        if (sb.length() > 0) {
            list.add(sb.toString());
        }

        // Return the ArrayList containing the extracted integer words
        return list;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
28)Given a string of a constant length, print a triangle out of it. The triangle should start with the given string and keeps shrinking downwards by removing one character from the begining of the string. The spaces on the left side of the triangle should be replaced with dot character.

       Example 1:
       Input:
       S = Geeks
       Output:
       Geeks
       .eeks
       ..eks
       ...ks
       ....s

       Example 2:
       Input:
       S = @io30 
       Output:
       @io30
       .io30
       ..o30
       ...30
       ....0 
 
Answer:
class Solution {
    static String triDownwards(String S){
        // code here
        int n=S.length();
        String str = "";
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {                       ///this for loop is used to add the dots per iteration.
                str +=".";
            }
            str +=S.substring(i,n);////print the whole string.
        }
        return str;
    }
};

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
29)Given a string S, consisting only of english alphabets, replace all the alphabets with the alphabets occuring at the same position when counted in reverse order of alphabets. For example, 'a' would be replaced by 'z', 'b' by 'y', 'c' by 'x' and so on. Any capital letters would be replaced by capital letters only.

       Example 1:
       Input: S = "Hello"
       Output: Svool
Explanation: 'H' is the 8th letter from the
beginning of alphabets, which is replaced by
'S' which comes at 8th position in reverse order
of alphabets. Similarly, all other letters are 
replaced by their respective upper or lower case 
letters accordingly.

     Example 2:
     Input: S = "GfG"
     Output: TuT
Explanation: 'G' is replaced with 'T'
and 'f' is replaced with 'u'

Answer:
class Solution 
{ 
  static String convert(String s) {
		
		StringBuilder result=new StringBuilder();
		char[] ch=s.toCharArray();                     ///convert the string into char array.
		
		for(int i=0;i<ch.length;i++) {
			
			if(Character.isLowerCase(ch[i])) {
				char converted=(char)('z'-(ch[i]-'a'));
				result.append(converted);
			}else if(Character.isUpperCase(ch[i])) {
				char converted=(char)('Z'-(ch[i]-'A'));
				result.append(converted);
			}else {
				result.append(ch);
			}		
		}
		
		
		return result.toString();
		
	}
} 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
31)Given two arrays: a1[0..n-1] of size n and a2[0..m-1] of size m. Task is to check whether a2[] is a subset of a1[] or not. Both the arrays can be sorted or unsorted. There can be duplicate elements.
 
       Example 1:
       Input:
       a1[] = {11, 7, 1, 13, 21, 3, 7, 3}
       a2[] = {11, 3, 7, 1, 7}
       Output:
       Yes
Explanation:
a2[] is a subset of a1[]

       Example 2:
       Input:
       a[] = {1, 2, 3, 4, 4, 5, 6}
       a2[] = {1, 2, 4}
       Output:
       Yes
Explanation:
a2[] is a subset of a1[]

      Example 3:
      Input:
      a1[] = {10, 5, 2, 23, 19}
      a2[] = {19, 5, 3}
      Output:
      No
Explanation:
a2[] is not a subset of a1[]

Answer:
class Compute {
    public String isSubset( long a1[], long a2[], long n, long m) {
        Map<Long,Integer>map=new HashMap<>();
        for(Long x:a1){
            if(map.containsKey(x)){
                map.put(x,map.get(x)+1);/////////////////////////////increase frequency of key
                }else{
                map.put(x,1);
              }
        }
        for(long x:a2){
            if(map.containsKey(x)){
                if(map.get(x)==1){
                    map.remove(x);
                }else{
                      map.put(x,map.get(x)-1);/////////////////////////////decresse
                }
            }else{
                return "No";
            }
        }
        return "Yes";
        
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
32)Given an array A[] of N elements. The task is to count number of even and odd elements in the array.

          Example:
          Input:
          N = 5
          A[] = 1 2 3 4 5
          Output:
          3 2
Explanation:
There are 3 odd elements (1, 3, 5)
and 2 even elements (2 and 4).

Answer:
class Solution
{
    public void countOddEven(int[] arr, int n)
    {
        // Code here
        int even=0;
        int odd=0;
        for(int i=0;i<n;i++){
            if(arr[i]%2==0){
                even++;
            }else{
                odd++;
            }
        }
        System.out.println(odd+" "+even);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
33)Your task is to implement the function strstr. The function takes two strings as arguments (s,x) and  locates the occurrence of the string x in the string s. The function returns an integer denoting the first occurrence of the string x in s (0 based indexing).

          Note: You are not allowed to use inbuilt function.
          Example 1:
          Input:
          s = GeeksForGeeks, x = Fr
          Output: -1
Explanation: Fr is not present in the
string GeeksForGeeks as substring.
 
         Example 2:
         Input:
         s = GeeksForGeeks, x = For
         Output: 5
Explanation: For is present as substring
in GeeksForGeeks from index 5 (0 based
indexing).
 
Answer:
1)
class GfG
{
    //Function to locate the occurrence of the string x in the string s.
    int strstr(String s, String x)
    {                                                                                        ////inbuild functions
       // Your code here
       if(s.contains(x))//searches the sequence of characters in the given string. 
        return s.indexOf(x);//return the first occurance string.
        
        return -1;
       }
       
    
}
2)
class GfG
{
    //Function to locate the occurrence of the string x in the string s.
    int strstr(String s, String x)
    {
       // Your code here
       int l1=s.length();
       int l2=x.length();
       for(int i=0;i<=l1-l2;i++){
           if(s.substring(i,i+l2).equals(x)){
               return i;
           }
       }
       return -1;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
33)
Given a binary array A[] of size N. The task is to arrange the array in increasing order.
Note: The binary array contains only 0  and 1.
 

           Example 1:
           Input: 
           5
           1 0 1 1 0
           Output: 
           0 0 1 1 1
Explanation: 
After arranging the elements in 
increasing order, elements will be as 
0 0 1 1 1.

           Example 2:
           Input:
           10
           1 0 1 1 1 1 1 0 0 0
           Output: 
           0 0 0 0 1 1 1 1 1 1

Explanation: 
After arranging the elements in 
increasing order, elements will be 
0 0 0 0 1 1 1 1 1 1.

Answer:class Solution
{
    //Function to sort the binary array.
    static void binSort(int A[], int N)
    {
        // add your code here
        int i=0;
        int j=N-1;
        while(i<j){
            if(A[i]==0)i++;
            else if(A[j]==1)j--;
            else if(A[i]==1||A[j]==0){
             int temp=A[i];
               A[i]=A[j];
               A[j]=temp;
            }
            
        }
        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
34)Given an array of size N. The task is to rotate array by D elements where D ≤ N.

        Example 1:
        Input:
        N = 7
        Arr[] = {1, 2, 3, 4, 5, 6, 7}
        D = 2
        Output: 3 4 5 6 7 1 2
Explanation: 
Rotate by 1: [2, 3, 4, 5, 6, 7, 1]
Rotate by 2: [3, 4, 5, 6, 7, 1, 2]

Answer:class Solution {
    void leftRotate(int[] arr, int n, int d) {
        // code here
        if(n==d){
            return;
        }
        ArrayList<Integer>list=new ArrayList<>();
        for(int i=d;i<n;i++){/////////////////////////////3,4,5,6,7
            list.add(arr[i]);
        }
        for(int i=0;i<d;i++){///////////////////////,1,2
            list.add(arr[i]);
        }
        for(int i=0;i<list.size();i++){
            arr[i]=list.get(i);////////////////3,4,5,6,7,1,2
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------35) Given a string str of lowercase alphabets. The task is to find the maximum occurring character in the string str. If more than one character occurs the maximum number of time then print the lexicographically smaller character.

           Example 1:
           Input:
           str = testsample
           Output: e
Explanation: e is the character which
is having the highest frequency.

Answer:
class Solution
{
    //Function to find the maximum occurring character in a string.
    public static char getMaxOccuringChar(String line)
    {
        // Your code here
        int max=0;
        char result=Character.MIN_VALUE;
        HashMap<Character,Integer>map=new HashMap<>();
        for(int i=0;i<line.length();i++){
            char ch=line.charAt(i);
                map.put(ch,map.getOrDefault(ch,0)+1);it is inbuild function for store key,value .
                if(map.get(ch)>max){
                    result=ch;
                    max=map.get(ch);
                }
                if(map.get(ch)==max && ch<result){
                    result=ch;
                }
            }
            return result;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
36)Write a program to implement a Stack using Array. Your task is to use the class as shown in the comments in the code editor and complete the functions push() and pop() to implement a stack. 

        Example 1:
        Input: 
        push(2)
        push(3)
        pop()
        push(4) 
        pop()
        Output: 3, 4
Explanation: 
push(2)    the stack will be {2}
push(3)    the stack will be {2 3}
pop()      poped element will be 3,
           the stack will be {2}

Answer:class MyStack
{
    int top;
	int arr[] = new int[1000];

    MyStack()
	{
		top = -1;
	}
	
	//Function to push an integer into the stack.
    void push(int a)
	{
	    // Your code here
	    arr[++top]=a;
	} 
	
    //Function to remove an item from top of the stack.
	int pop()
	{
        if(top==-1){
            return -1;
        }else{
            return arr[top--];
        }
	}
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------37)Implement a Queue using an Array. Queries in the Queue are of the following type:
(i) 1 x   (a query of this type means  pushing 'x' into the queue)
(ii) 2     (a query of this type means to pop element from queue and print the poped element)

        Example 1:
        Input:
        Q = 5
        Queries = 1 2 1 3 2 1 4 2
        Output: 2 3
Explanation:
In the first test case for query 
1 2 the queue will be {2}
1 3 the queue will be {2 3}
2   poped element will be 2 the 
    queue will be {3}
1 4 the queue will be {3 4}
2   poped element will be 3 

Answer:
class MyQueue {

    int front, rear;
	int arr[] = new int[100005];

    MyQueue()
	{
		front=0;
		rear=0;
	}
	
	//Function to push an element x in a queue.
	void push(int x)
	{
	    // Your code her
	    arr[rear++]=x;
	} 

    //Function to pop an element from queue and return that element.
	int pop()
	{
		// Your code here
		if(front==rear){
		    return -1;
		}else{
		    return arr [front++];
		}
		
	} 
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
38) Given a string S consisting only '0's and '1's,  find the last index of the '1' present in it.
     Example 1:
     Input:
     S = 00001
     Output:
     4
Explanation:
Last index of  1 in given string is 4.

Answer:
class Solution {
    public int lastIndex( String s) {
        for(int i=s.length()-1;i>=0;i--){
            char ch=s.charAt(i);
            if(ch=='1'){
             return i;
            }
        }
        return -1;
        
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
39)Missing Number
    Example 1:
    Input:                                                       
    N = 4                                        
    A[] = {1, 4, 3}
    Output:
    2     
Explanation:
Vaibhav placed 4 integers but he picked
up only 3 numbers. So missing number
will be 2 as it will become 1,2,3,4.

Answer:class Compute {
    
    public static int missingNumber(int A[], int N)
    {
         // Your code goes here
         int sum=0;
         for(int i=0;i<N-1;i++){
             sum=sum+A[i];
         }
         int ts=(N*(N+1))/2;/////it is formula of total *N* number of sum.
         int miss=ts-sum;
         return miss;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
40)This is a functional problem. Your task is to return the product of array elements under a given modulo.
The modulo operation finds the remainder after the division of one number by another. For example, K(mod(m))=K%m= remainder obtained when K is divided by m

     Example:
     Input:
     1
     4
     1 2 3 4
     Output:
     24

Answer:
class GfG
{
    public static Long product(Long arr[], Long mod, int n)
    {
        //yout code here
        long p=1;
        for(int i=0;i<n;i++){
           p=(p*arr[i])%mod; 
        }
        return p;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
41)Given an array of integers, your task is to find the smallest and second smallest element in the array. If smallest and second smallest do not exist, print -1.

           Example 1:
           Input :
           5
           2 4 3 5 6
           Output :
           2 3  
Explanation: 
2 and 3 are respectively the smallest 
and second smallest elements in the array.

          Example 2:
          Input :
          6
          1 2 1 3 6 7
          Output :
          1 2 
Explanation: 
1 and 2 are respectively the smallest 
and second smallest elements in the array.

Answer:
class Compute 
{
    public long[] minAnd2ndMin(long a[], long n)  
    {
        long min1=0;
        long min2=0;
        
        Arrays.sort(a);
        
        min1 = a[0];
        
        for(int i=0; i<n-1; i++){
            if(a[i] != a[i+1]){
                min2 = a[i+1];
                break;
            }
        }
        
        if(min2 == 0){
            return new long[]{-1};
        }
        
        long[] ans = {min1,min2};
        return ans;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
42)Given a string S. For each index i(1<=i<=N-1), erase it if s[i] is equal to s[i-1] in the string.

      Example 1:
      Input:
      S = aabb
      Output:  ab 
Explanation: 'a' at 2nd position is
appearing 2nd time consecutively.
Similiar explanation for b at
4th position.
 
Answer:class Solution{
    public String removeConsecutiveCharacter(String S){
        String res="";
        int n=S.length();
        for(int i=0;i<n;i++){
            if(i<n-1 && S.charAt(i)==S.charAt(i+1)){
             continue;
            }else{
                res+=S.charAt(i);
            }
        }
        return res;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
43)Given a string consisting of lowercase english alphabets. Find the repeated character present first in the string.

        Example 1:
        Input:
        S = "geeksforgeeks"
        Output: g
Explanation: g, e, k and s are the repeating
characters. Out of these, g occurs first. 

Answer:
class Solution
{
    char firstRep(String s)
    {
        for(int i = 0; i < s.length(); ++i){
            for(int j = i+1; j < s.length(); ++j){
                if(s.charAt(i) == s.charAt(j)){
                    return s.charAt(i);
                }
            }
        }
        
        return '#';
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
44)Given a binary string S. The task is to count the number of substrings that start and end with 1. For example, if the input string is “00100101”, then there are three substrings “1001”, “100101” and “101”.

        Example 1:
        Input:
        N = 4
        S = 1111
        Output: 6
Explanation: There are 6 substrings from
the given string. They are 11, 11, 11,
111, 111, 1111.

Answer:
class Solution
{
    //Function to count the number of substrings that start and end with 1.
    public static int binarySubstring(int a, String str)
    {
        // Your code here
        int count=0;
        for(int i=0;i<a;i++){
            if(str.charAt(i)=='1'){
                count++;
            }
        }
        return ((count*(count-1))/2);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
45)Given two strings S1 and S2 in lowercase, the task is to make them anagram. The only allowed operation is to remove a character from any string. Find the minimum number of characters to be deleted to make both the strings anagram. Two strings are called anagram of each other if one of them can be converted into another by rearranging its letters.
 
      Example 1:
      Input:
      S1 = bcadeh
      S2 = hea
      Output: 3
Explanation: We need to remove b, c
and d from S1.

ANswer:class GfG
{
	public int remAnagrams(String s,String s1)
        {
        //add code here.
        int freq[]=new int[26];
        int n=s.length();
        int m=s1.length();
        
        for(int i=0;i<n;i++){
            freq[s.charAt(i)-'a']++;
            
        }
        for(int i=0;i<m;i++){
            freq[s1.charAt(i)-'a']--;
        }
        int ans=0;
        for(int i=0;i<26;i++){
            ans+=Math.abs(freq[i]);
        }
        return ans;
}
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
46)Given two strings s1 and s2. Modify both the strings such that all the common characters of s1 and s2 are to be removed and the uncommon characters of s1 and s2 are to be concatenated.
Note: If all characters are removed print -1.

        Example 1:
        Input:
        s1 = aacdb
        s2 = gafd
        Output: cbgf
Explanation: The common characters of s1
and s2 are: a, d. The uncommon characters
of s1 and s2 are c, b, g and f. Thus the
modified string with uncommon characters
concatenated is cbgf.

Answer:class Solution
{
    //Function to remove common characters and concatenate two strings.
    public static String concatenatedString(String s1,String s2)
    {
        String res="";
        HashMap<Character,Integer>m=new HashMap<>();
        for(int i=0;i<s2.length();i++){
            m.put(s2.charAt(i),1);
        }
        for(int i=0;i<s1.length();i++){
            if(!m.containsKey(s1.charAt(i))){
                res=res+s1.charAt(i);
            }else{
                m.put(s1.charAt(i),2);
            }
        }
         for(int i=0;i<s2.length();i++){
           if (m.get(s2.charAt(i)) == 1){
             res=res+s2.charAt(i);
               
           }
        }
         if(res==""){
             return "-1";
        }else
         return res;
    }
  }

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
47)You are given an integer N. You need to convert all zeroes of N to 5.

       Example 1:
       Input:
       N = 1004
       Output: 1554
Explanation: There are two zeroes in 1004
on replacing all zeroes with "5", the new
number will be "1554".

Answer:
class GfG {
    int convertfive(int num) {
        // Your code here
        String s=String.valueOf(num);///int to string convert 
        s=s.replaceAll("0","5");
        return Integer.parseInt(s);///string to int
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
48)Given an array of size n which contains all elements occurring in multiples of K, except one element which doesn't occur in multiple of K. Find that unique element.

       Example 1:
       Input : 
       n = 7, k = 3
       arr[] = {6, 2, 5, 2, 2, 6, 6}
       Output : 
       5
Explanation:
Every element appears 3 times except 5.

Answer:
class Solution {
    
    public int findUnique(int a[], int n, int k)
    {
        int ans=0;
        HashMap<Integer,Integer>hm=new HashMap<>();
        for(int i=0;i<n;i++){
           hm.put(a[i],hm.getOrDefault(a[i],0)+1);
        }
         // System.out.println(hm);
        for(int i : hm.keySet()){
            if(hm.get(i) % k !=0){
                ans=i;
            }
        }
        return ans;
    }       
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
49)Given a string of length N, made up of only uppercase characters 'R' and 'G', where 'R' stands for Red and 'G' stands for Green.Find out the minimum number of characters you need to change to make the whole string of the same colour.

       Example 1:
       Input:
       N=5
       S="RGRGR"
       Output:
       2
Explanation:
We need to change only the 2nd and 
4th(1-index based) characters to 'R', 
so that the whole string becomes 
the same colour.

Answer:class Solution {
    static int RedOrGreen(int N, String S) {
        //code here
        int countG=0;
        int countR=0;
        
        for(int i=0;i<N;i++){
            if(S.charAt(i)=='G'){
                countG++;
            }else{
                countR++;
            }
        }
        if(countG<countR){
            return countG;
        }else{
            return countR;
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
50)Given a string S, the task is to change the complete string to Uppercase or Lowercase depending upon the case for the first character.

        Example 1:
        Input:
        S = "abCD"
        Output: abcd
Explanation: The first letter (a) is 
lowercase. Hence, the complete string
is made lowercase.

Answer:
class Solution{
    String modify(String s){
        String ans=" ";
        for(int i=0;i<s.length();i++){
        char[] ch = s.toCharArray();
            if(ch[0]>='a' && ch[0]<='z'){                          /////more time to execute
                ans= s.toLowerCase();
            }else
                ans=s.toUpperCase();
        }
        return ans;
    }
}
________________________________________
2)To Reduce time complexity.
class Solution{
    String modify(String s){
        if(Character.isUpperCase(s.charAt(0)))
        {
           s=s.toUpperCase();
        }
        else{
            s=s.toLowerCase();
        }
        return s ;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
51)Given an array Arr[], write a program that segregates even and odd numbers. The program should put all even numbers first in sorted order, and then odd numbers in sorted order.

      Note :- You don't have to return the array, you just have to modify it in-place.
      Example 1:
      Input: 
      N = 7
      Arr[] = {12, 34, 45, 9, 8, 90, 3}
      Output: 8 12 34 90 3 9 45
Explanation: Even numbers are 12, 34,
8 and 90. Rest are odd numbers. After
sorting even numbers 8 12 34 90 and 
after sorting odd numbers 3 9 45. Then
concat both.

Answer:

class Solution {
    void segregateEvenOdd(int arr[], int n) {
           ArrayList<Integer> odd = new ArrayList<>();
        ArrayList<Integer> even = new ArrayList<>();
          for(int num:arr){
            if(num%2==0){
                even.add(num);
            }
            else{
                odd.add(num);
            }
        }
           
        Collections.sort(even);///////////////////////inbuild function of sorting the array in ascending order in arraylist.
        Collections.sort(odd);
            int i=0;
        for(int x:even){
            arr[i++] = x;
        }
        for(int x:odd){
            arr[i++] = x;
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
52)Given an array of N positive integers where all numbers occur even number of times except one number which occurs odd number of times. Find the exceptional number.

        Example 1:
        Input:
        N = 7
        Arr[] = {1, 2, 3, 2, 3, 1, 3}
        Output: 3
Explaination: 3 occurs three times.

Answer:
class Solution {
    int getOddOccurrence(int[] arr, int n) {
        // code here                                      ////using xor properties.
        int ans=0;                                           x^0=x      x^x=0           
        for(int i=0;i<n;i++){
            ans=ans^arr[i];
        }
        return ans;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
53)Given an array arr[] of size N and an integer K, the task is to left rotate the array K indexes

      Example 1:
      Input: N = 7, K = 2
      arr[] = {1, 2, 3, 4, 5, 6, 7}
      Output: 3 4 5 6 7 1 2
Explanation: Rotation of the above 
array by 2 will make the output array .

Answer:class Solution{
    void leftRotate(long arr[], int k,int n){
        k = k % n;                              ///check the array size is greater than k
        long a[] = new long[n];
        int j = 0;                                                  
        for(int i = k; i < n; i++){
            a[j++] = arr[i];
        }
        for(int i = 0; i < k; i++){
            a[j++] = arr[i];
        }
        for(int i = 0; i < n; i++){
            arr[i] = a[i];
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
54)Given a string S of lowercase alphabets, check if it is isogram or not. An Isogram is a string in which no letter occurs more than once.

           Example 1:
           Input:
           S = machine
           Output: 1
Explanation: machine is an isogram
as no letter has appeared twice. Hence
we print 1.

Answer:
class Solution
{
    //Function to check if a string is Isogram or not.
    static boolean isIsogram(String data){
        HashMap<Character,Integer>hm=new HashMap<>();
        for(int i=0;i<data.length();i++){
            char ch=data.charAt(i);
           hm.put(ch,hm.getOrDefault(ch,0)+1);
        }
        for(Character key : hm.keySet()){
            if(hm.get(key) > 1){
                return false;
            }
        }
        return true;
    }       
    
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
55)You are given an array arr[], and you have to re-construct an array arr[].
The values in arr[] are obtained by doing Xor of consecutive elements in the array.

      Example 1:
      Input : n=5, arr[ ] = {10, 11, 1, 2, 3}
      Output : 1 10 3 1 3
Explanation:
At index 0, arr[0] xor arr[1] = 1
At index 1, arr[1] xor arr[2] = 10
At index 2, arr[2] xor arr[3] = 3
...
At index 4, No element is left So, it will remain as
it is.
New Array will be {1, 10, 3, 1, 3}.

Answer:
class Complete{
    
   
    // Function for finding maximum and value pair
    public static int[] game_with_number (int arr[], int n) {
        // Complete the functio
    for(int i=0;i<n-1;i++){
        int temp=arr[i];
        arr[i]=arr[i+1]^temp;
    }
    return arr;
    }
    
    
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------56)